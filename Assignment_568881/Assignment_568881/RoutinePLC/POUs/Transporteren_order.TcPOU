<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Transporteren_order" Id="{00baf4e9-3cbf-4d61-b5e6-c471975a92d7}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Transporteren_order
VAR
	currentState : Taak_2 := Taak_2.Functie;
	Huidige_tijd: INT;
	Controleren_tijd : BOOL;
	Wachten: BOOL;
	Inladen_krat: BOOL;
	Start_transport: BOOL;
	Timer_1 : TON;
	Timer_2 : TON;
	Locatie: BOOL;
	Afleveren : BOOL;
	
	Klant_aanwezig: BOOL;
	Klant_afwezig: BOOL;
	Afleveren_voltooid: BOOL;
	Afleveren_mislukt: BOOL;
	Retour_vestiging: BOOL;
	Taak2Reset: BOOL;

	WachtTijd_taak_2_1: INT;
	WachtTijd_taak_2_2: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[RoutineGVL.Controleren_tijd :=POU(RoutineGVl.Huidige_tijd);   

CASE currentState OF
	// Het gebruiken van de functie om de tijd te controleren
	Taak_2.Functie:
		IF RoutineGVL.Controleren_tijd = TRUE THEN
			CurrentState := taak_2.inladen; 
			RoutineGVL.Wachten := FALSE;
		ELSIF RoutineGVL.Controleren_tijd = FALSE THEN
			RoutineGVL.Wachten := TRUE;
			CurrentState := taak_2.Functie;
		END_IF
	
	Taak_2.Inladen:
		IF RoutineGVL.Controleren_tijd = TRUE THEN
			RoutineGVL.Inladen_krat := TRUE; //Krat laden in bus
			RoutineGVL.Wachten := FALSE; 
			CurrentState := Taak_2.Transport;
		ELSIF Controleren_tijd = FALSE THEN
			RoutineGVL.Wachten:= TRUE;//Wachten tot 10:00
			CurrentState := taak_2.Functie;
			RoutineGVL.Inladen_krat := FALSE;
		END_IF
		
	Taak_2.Transport:
		RoutineGVL.Start_transport := TRUE; // Rijden naar garagist
		RoutineGVL.Timer_1(IN:=TRUE, PT:=T#5S); //Timer simuleert rijtijd naar de klant
		IF RoutineGVL.Timer_1.Q = TRUE THEN
			CurrentState := taak_2.Afleveren;
			RoutineGVL.Locatie := TRUE; // Aangekomen op locatie
			RoutineGVL.Timer_1(IN:=FALSE);
		END_IF
	
	Taak_2.Afleveren:	
		RoutineGVL.Afleveren := TRUE;
		IF RoutineGVL.Klant_aanwezig = TRUE THEN //Artikelen en pakbon afleveren
			RoutineGVL.Afleveren_voltooid := TRUE;
			RoutineGVL.Afleveren_mislukt := FALSE;
			RoutineGVL.Timer_2(IN:=TRUE, PT:=T#5S); //Timer simuleert rijtijd naar de vestiging
			IF RoutineGVL.Timer_2.Q = TRUE THEN
				CurrentState := taak_2.Retour;
				RoutineGVL.Timer_2(IN:=FALSE);
			END_IF
		ELSIF RoutineGVL.Klant_afwezig = TRUE THEN //Order retour nemen
			RoutineGVL.Afleveren_mislukt := TRUE;
			RoutineGVL.Afleveren_voltooid := FALSE;
			RoutineGVL.Timer_2(IN:=TRUE, PT:=T#5S); //Timer simuleert rijtijd naar de vestiging
			IF RoutineGVL.Timer_2.Q = TRUE THEN
				CurrentState := taak_2.Retour;
				RoutineGVL.Timer_2(IN:=FALSE);
			END_IF	
		END_IF 
	Taak_2.Retour:
		RoutineGVL.Retour_vestiging :=TRUE; // Terug bij vestiging
END_CASE

// Het resetten van de taak 
IF RoutineGVL.Taak2Reset = TRUE THEN
	CurrentState := taak_2.Functie;
	RoutineGVL.Huidige_tijd := 800;
	RoutineGVL.Wachten := FALSE;
	RoutineGVL.Inladen_krat := FALSE;
	RoutineGVL.Start_transport := FALSE;
	RoutineGVL.Timer_1(IN:=FALSE);
	RoutineGVL.Timer_2(IN:=FALSE);
	RoutineGVL.Locatie := FALSE;
	RoutineGVL.Afleveren := FALSE;
	RoutineGVL.Klant_aanwezig := FALSE;
	RoutineGVL.Klant_afwezig := FALSE;
	RoutineGVL.Afleveren_voltooid := FALSE;
	RoutineGVL.Afleveren_mislukt := FALSE;
	RoutineGVL.Retour_vestiging := FALSE;
	RoutineGVL.Taak2Reset := FALSE;
END_IF
RoutineGVL.WachtTijd_taak_2_1 := TIME_TO_INT(RoutineGVL.Timer_1.ET) / 1000; // De tijd omzetten in een integer voor de progressbar
RoutineGVL.WachtTijd_taak_2_2 := TIME_TO_INT(RoutineGVL.Timer_2.ET) / 1000; // De tijd omzetten in een integer voor de progressbar]]></ST>
    </Implementation>
    <LineIds Name="Transporteren_order">
      <LineId Id="76" Count="0" />
      <LineId Id="78" Count="0" />
      <LineId Id="74" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="96" Count="0" />
      <LineId Id="79" Count="0" />
      <LineId Id="81" Count="0" />
      <LineId Id="89" Count="0" />
      <LineId Id="84" Count="0" />
      <LineId Id="87" Count="0" />
      <LineId Id="99" Count="0" />
      <LineId Id="82" Count="0" />
      <LineId Id="90" Count="1" />
      <LineId Id="101" Count="0" />
      <LineId Id="92" Count="0" />
      <LineId Id="110" Count="1" />
      <LineId Id="95" Count="0" />
      <LineId Id="102" Count="1" />
      <LineId Id="108" Count="0" />
      <LineId Id="106" Count="1" />
      <LineId Id="122" Count="1" />
      <LineId Id="134" Count="0" />
      <LineId Id="136" Count="3" />
      <LineId Id="124" Count="0" />
      <LineId Id="141" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="146" Count="0" />
      <LineId Id="151" Count="1" />
      <LineId Id="162" Count="0" />
      <LineId Id="213" Count="3" />
      <LineId Id="212" Count="0" />
      <LineId Id="155" Count="0" />
      <LineId Id="260" Count="0" />
      <LineId Id="163" Count="0" />
      <LineId Id="202" Count="0" />
      <LineId Id="209" Count="2" />
      <LineId Id="207" Count="0" />
      <LineId Id="153" Count="0" />
      <LineId Id="220" Count="1" />
      <LineId Id="80" Count="0" />
      <LineId Id="197" Count="0" />
      <LineId Id="178" Count="0" />
      <LineId Id="11" Count="0" />
      <LineId Id="183" Count="0" />
      <LineId Id="193" Count="0" />
      <LineId Id="259" Count="0" />
      <LineId Id="184" Count="0" />
      <LineId Id="187" Count="0" />
      <LineId Id="230" Count="0" />
      <LineId Id="223" Count="0" />
      <LineId Id="188" Count="0" />
      <LineId Id="191" Count="1" />
      <LineId Id="261" Count="0" />
      <LineId Id="186" Count="0" />
      <LineId Id="185" Count="0" />
      <LineId Id="180" Count="0" />
      <LineId Id="195" Count="0" />
      <LineId Id="181" Count="0" />
      <LineId Id="179" Count="0" />
      <LineId Id="250" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>